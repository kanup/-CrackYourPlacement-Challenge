public int subarraysDivByK(int[] nums, int k) {
        //brute force -> TLE -> O(n^2) TC O(1) SC
//         long sum = 0;
//         int count = 0;
//         for( int i = 0; i< nums.length; i++ ){
//             sum += nums[i];
//             if( sum % k == 0 ){
//                 count ++;
//             }
//             for( int j = i+1; j < nums.length; j++ ){
//                 sum += nums[j];
//                 if( sum % k == 0 ){
//                     count ++;
//                 }
//             }
//             sum = 0;
            
//         }
//         return count;
        
        int sum = 0;
        int count = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0,1);
        for( int i = 0; i < nums.length; i++ ){
            sum += nums[i];
            int rem = sum % k;
            if( rem < 0 ){
                rem += k;
            }
            if( map.containsKey(rem) ){
                count += map.get(rem);
                map.put(rem, map.get(rem) + 1);
            }else{
                map.put(rem,1);
            }
        }
        return count;
        
    }
