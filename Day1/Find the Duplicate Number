public int findDuplicate(int[] nums) {
        // brute force approach O(n^2) TC, O(1) SC
        // for( int i = 0; i < nums.length; i++ ){
        //     for( int j = i + 1; j < nums.length; j++ ){
        //         if( nums[j] == nums[i] ){
        //             return nums[j];
        //         }
        //     }
        // }
        // return -1;
        
        // n -> 10^5    n^2 -> 10^5 * 10^5 -> 10^10 > 10^9 -> TLE
        
        
        // brute force optimised O(n) TC, O(N) SC
        // HashSet<Integer> set = new HashSet<>(nums.length - 1);
        // for( int i = 0; i < nums.length; i++ ){
        //     if( set.contains(nums[i])){
        //         return nums[i];
        //     }else{
        //         set.add(nums[i]);
        //     }
        // }
        // return -1;
        
        
        //new approach - negative marking - O(n) TC, O(1) SC but modifies the array 
        // int ans = 0;
        // for( int i = 0; i < nums.length; i++ ){
        //     if( nums[Math.abs(nums[i])] < 0 ){
        //         ans = Math.abs(nums[i]);
        //         break;
        //     }
        //     nums[Math.abs(nums[i])] *= -1;
        // }
        // for( int i = 0; i < nums.length; i++ ){
        //     if( nums[i] < 0 ){
        //         nums[i] = Math.abs(nums[i]);
        //     }
        // }
        // return ans;
        
        
        //linkedlist approach - best - O(n) TC, O(1) SC
        //[1,2,3,4,2] 1->2->3->4-
                      // |     |
                      // -------
        int sptr = nums[0];
        int fptr = nums[0];
        do{
            sptr = nums[sptr];
            fptr = nums[nums[fptr]]; 
        }while( sptr != fptr );
        
        sptr = nums[0];
        
        while( sptr != fptr){
            sptr = nums[sptr];
            fptr = nums[fptr];
        }
        
        return sptr;
        
        
        
    }
